import os
from typing import Dict, List, Any

def generate_detailed_report(vulnerabilities: Dict[str, List[Dict[str, Any]]]) -> str:
    """Generate a detailed vulnerability report with specific locations and fixes."""
    report = "# Detailed Security Vulnerability Report\n\n"
    
    total_vulns = sum(len(vulns) for vulns in vulnerabilities.values())
    report += f"## Summary\nTotal files scanned: {len(vulnerabilities)}\n"
    report += f"Total vulnerabilities detected: {total_vulns}\n\n"
    
    # Statistics by vulnerability type
    vuln_types = {}
    for file_vulns in vulnerabilities.values():
        for vuln in file_vulns:
            vuln_type = vuln['type']
            vuln_types[vuln_type] = vuln_types.get(vuln_type, 0) + 1
    
    report += "## Vulnerability Types Found\n"
    for vuln_type, count in vuln_types.items():
        report += f"- {vuln_type.replace('_', ' ').title()}: {count}\n"
    
    report += "\n## Detailed Findings\n"
    for file_path, file_vulns in vulnerabilities.items():
        report += f"\n### File: {file_path}\n"
        
        for vuln in file_vulns:
            report += f"\n#### {vuln['type'].replace('_', ' ').title()}\n"
            report += f"- **Location**: Line {vuln['line_number']}\n"
            report += f"- **Vulnerable Code**:\n```python\n{vuln['line_content']}\n```\n"
            report += f"- **Confidence Score**: {vuln['confidence']}\n"
            report += f"- **Detection Method**: {vuln['detection_method']}\n"
            report += f"- **Risk Level**: {'High' if float(str(vuln['confidence'])) > 0.7 else 'Medium'}\n"
            
            report += "\n**Recommended Fixes**:\n"
            for idx, fix in enumerate(vuln['fixes'], 1):
                report += f"{idx}. {fix}\n"
    
    return report

def save_report(report: str, output_path: str) -> None:
    """Save the vulnerability report to a file."""
    with open(output_path, 'w') as f:
        f.write(report)
